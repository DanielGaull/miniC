COMMENT = _{ ("/*" ~ (!"*/" ~ ANY)* ~ "*/") | ("//" ~ (!"\n" ~ ANY)*) }
WHITESPACE = _{ " " | "\n" | "\t" | "\r" }

program = { SOI ~ topLevel* ~ EOI }

// == Top-level stuff ==
topLevel = { function | struct | typedef | import | varDec }

function = { typ ~ identifier ~ "(" ~ paramList ~ ")" ~ "{" ~ statement* ~ "}" }

struct = { "struct" ~ identifier ~ "{" ~ structInner ~ "}" }
structInner = { structVarDec }
structVarDec = { typ ~ identifer ~ ";" }

typedef = { "typedef" ~ (struct | typ) ~ identifier }

import = { "#import" ~ string }

// == Core statements ==
statement = { (expression | varDec | varAssign | binOpVarAssign | return) ~ ";" }
varAssign = { identExpr ~ "=" ~ expression }
varDec = { typ ~ identifier ~ ("=" ~ expression)? }
binOpVarAssign = { identExpr ~ arithLogicBinOp ~ "=" ~ expression }
return = { "return" ~ expression }

// == Expressions ==
atom = { number | boolean | string | reference | identifier | "(" ~ expression ~ ")" }
exprTail = { callTail | binaryOperationTail | memberAccessTail | pointerAccessTail | indexTail | "" }
expression = { atom ~ exprTail }

identifier = ${ (ASCII_ALPHA | "_") ~ (ASCII_ALPHANUMERIC | "_")* }

reference = ${ "&" ~ identifier }

typ = { "struct"? ~ identifier ~ "*"? }

number = @{ ("+" | "-")? ~ (ASCII_DIGIT)+ ~ ("." ~ (ASCII_DIGIT)+)? }
boolean = { "true" | "false" }

string = ${ "\"" ~ strinner ~ "\"" }
strinner = @{ strchar* }
strchar = {
    !("\"" | "\\") ~ ANY
    | "\\" ~ ("\"" | "\\" | "/" | "b" | "f" | "n" | "r" | "t")
    | "\\" ~ ("u" ~ ASCII_HEX_DIGIT{4})
}

// Other utils
arithLogicBinOp = { "+" | "-" | "*" | "/" | "&" | "|" | "&&" | "||" | "<<" | ">>" }
binOp = { arithLogicBinOp | "==" | "!=" | ">" | "<" | ">=" | "<=" }

exprList = _{ (expression ~ ",")* ~ expression? }
paramList = _{ (typ ~ identifier ~ ",")* ~ typ ~ identifier }

identExpr = { identifier | ("*" ~ expression) }

// Tails
binaryOperationTail = { binOp ~ expression ~ exprTail }
indexTail = { "[" ~ expression ~ "]" ~ exprTail }
memberAccessTail = { "." ~ identifier ~ exprTail }
pointerAccessTail = { "->" ~ identifier ~ exprTail }
callTail = { "(" ~ exprList ~ ")" ~ exprTail }
